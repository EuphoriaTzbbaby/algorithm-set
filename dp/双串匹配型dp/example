********************************************************************************leetcode*************************************************************************************

115.不同的子序列(比较简单)
class Solution:
    def numDistinct(self, s: str, t: str) -> int:
        mod = 10 ** 9 + 7
        @cache
        # i 表示当前匹配到 s 的第 i 个位置，j 表示当前匹配到 t 的第 j 个位置
        def dfs(i: int, j: int):
            # t 匹配成功了
            if j < 0:
                return 1
            # 不合法，因为 s 已经匹配完了，t 还没有匹配完
            if i < 0:
                return 0
            if s[i] != t[j]:
                return dfs(i - 1, j) % mod 
            return (dfs(i - 1, j - 1) + dfs(i - 1, j)) % mod 
        return dfs(len(s) - 1, len(t) - 1)

72.编辑距离(想清楚 添加、修改、替换操作后下一个状态是什么)
class Solution:
    def minDistance(self, s1: str, s2: str) -> int:
        @cache 
        def dfs(i: int, j: int):
            if i < 0:
                return j + 1
            if j < 0:
                return i + 1
            if s1[i] == s2[j]:
                return dfs(i - 1, j - 1)
            return min(dfs(i, j - 1), dfs(i - 1, j), dfs(i - 1, j - 1)) + 1
        return dfs(len(s1) - 1, len(s2) - 1)

712.两个字符串的最小ASCII删除和(思路同上一题)
class Solution:
    def minimumDeleteSum(self, s: str, t: str) -> int:
        m, n = len(s), len(t)
        @cache 
        def dfs(i: int, j: int):
            if i < 0:
                return sum(ord(t[k]) for k in range(j + 1))
            if j < 0:
                return sum(ord(s[k]) for k in range(i + 1))
            if s[i] == t[j]:
                return dfs(i - 1, j - 1)
            return min(dfs(i, j - 1) + ord(t[j]), dfs(i - 1, j) + ord(s[i]))
        return dfs(m - 1, n - 1)
1143.最长公共子序列
class Solution:
    def longestCommonSubsequence(self, s1: str, s2: str) -> int:
        @cache
        def dfs(i: int, j: int):
            if i < 0:
                return 0
            if j < 0:
                return 0
            if s1[i] != s2[j]:
                return max(dfs(i, j - 1), dfs(i - 1, j))
            return dfs(i - 1, j - 1) + 1
        return dfs(len(s1) - 1, len(s2) - 1)
