**********************************************************************************leetcode*********************************************************************************
这几个都是最大化自己和第二者的差值

1690.石子游戏 VII
class Solution:
    def stoneGameVII(self, stones: List[int]) -> int:
        s = list(accumulate(stones, initial=0))  # 前缀和
        @cache  # 缓存装饰器，避免重复计算 dfs 的结果
        def dfs(i: int, j: int) -> int:
            if i == j:  # 递归边界
                return 0
            return max(s[j + 1] - s[i + 1] - dfs(i + 1, j), s[j] - s[i] - dfs(i, j - 1))
        ans = dfs(0, len(stones) - 1)
        dfs.cache_clear()  # 防止爆内存
        return ans

877.石子游戏
class Solution:
    def stoneGame(self, piles: List[int]) -> bool:
        @cache 
        def dfs(i: int, j: int):
            if i == j:
                return piles[i]
            return max(piles[i] - dfs(i + 1, j), piles[j] - dfs(i, j - 1))
        # 从区间 [0...n - 1] 所能达成的最大差值(先手 相比于 后手)
        return dfs(0, len(piles) - 1) > 0
