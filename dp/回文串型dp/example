********************************************************************************leetcode************************************************************************************

  5.最长回文子串(从大串到小串)
  class Solution:
    def longestPalindrome(self, s: str) -> str:
        n = len(s)
        dp = [[False] * n for _ in range(n)]
        for i in range(n - 1, -1, -1):
            dp[i][i] = True 
            if i + 1 < n:
                dp[i][i + 1] = (s[i] == s[i + 1])
            for j in range(i + 2, n):
                dp[i][j] = dp[i + 1][j - 1] and (s[i] == s[j])
        f = []
        for i in range(n):
            for j in range(n):
                if dp[i][j]:
                    f.append([j - i + 1, i, j])
        f.sort(key = lambda x: -x[0])
        return s[f[0][1] : f[0][2] + 1]
