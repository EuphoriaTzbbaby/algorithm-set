***************************************************************************leetcode***************************************************************************************

62.不同路径(比较直接)
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        @cache
        def dfs(i: int, j: int):
            if i < 0 or j < 0:
                return 0
            if i == j and j == 0:
                return 1
            return dfs(i - 1, j) + dfs(i, j - 1)
        return dfs(m - 1, n - 1)

64.最小路径和(比较直接)
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        @cache 
        def dfs(i: int, j: int):
            if i < 0 or j < 0:
                return inf 
            if i == 0 and j == 0:
                return grid[i][j]
            return min(dfs(i - 1, j), dfs(i, j - 1)) + grid[i][j]
        return dfs(len(grid) - 1, len(grid[0]) - 1)

63.不同路径II(比较直接)
class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        m, n = len(obstacleGrid), len(obstacleGrid[0])
        # 注意起始点能不能走
        if obstacleGrid[-1][-1]:
            return 0
        @cache
        def dfs(i: int, j: int):
            if i < 0 or j < 0:
                return 0
            if obstacleGrid[i][j]:
                return 0
            if i == j and j == 0:
                return 1
            return dfs(i - 1, j) + dfs(i, j - 1)
        return dfs(m - 1, n - 1)

120.三角形最小路径和(比较直接)
class Solution:
    def minimumTotal(self, tri: List[List[int]]) -> int:
        m = len(tri)
        @cache 
        def dfs(i: int, j: int):
            if i == m - 1:
                return tri[i][j]
            res = inf 
            for k in range(j, j + 2):
                # 注意判断能不能转移
                if k <= i + 1:
                    res = min(res, dfs(i + 1, k) + tri[i][j])
            return res 
        return dfs(0, 0)
