{
	"FunctionalGraph Class": {
		"scope": "cpp",
		"prefix": "fg",
		"body": [
			"class FunctionalGraph {",
			"public:",
			"\tll loopCnt;",
			"\tll n;",
			"\tvector<ll> d;",
			"\tvector<ll> pos;",
			"\tvector<ll> dist;",
			"\tvector<ll> eachLoopSize;",
			"\tvector<ll> joinPoint;",
			"\tFunctionalGraph(vector<ll> a) {",
			"\t\tloopCnt = 0;",
			"\t\td = a;",
			"\t\tn = d.size();",
			"\t\tpos.resize(n, -1);",
			"\t\tdist.resize(n, 0);",
			"\t\tjoinPoint.resize(n);",
			"\t\tfindLoop();",
			"\t}",
			"\tbool localLoop(int x) {",
			"\t\treturn dist[x] == 0;",
			"\t}",
			"\tvoid findLoop() {",
			"\t\tvector<ll> f;",
			"\t\tfor(int i = 0; i < n; i += 1) {",
			"\t\t\tif(pos[i] != -1) continue;",
			"\t\t\tint cur = i;",
			"\t\t\twhile(pos[cur] == -1) {",
			"\t\t\t\tpos[cur] = loopCnt;",
			"\t\t\t\tf.pb(cur);",
			"\t\t\t\tcur = d[cur];",
			"\t\t\t}",
			"\t\t\tif(pos[cur] < loopCnt) {",
			"\t\t\t\t// cout << cur << \" \" << loopCnt << endl;",
			"\t\t\t\t// 没构成新环",
			"\t\t\t\tint jp = cur;",
			"\t\t\t\tfor(int j = 0; j < f.size(); j += 1) {",
			"\t\t\t\t\t// cout << f[j] << \" \" << loopCnt << \" \" << 888 << endl;",
			"\t\t\t\t\tpos[f[j]] = pos[cur];",
			"\t\t\t\t\tjoinPoint[f[j]] = cur;",
			"\t\t\t\t\tdist[f[j]] = f.size() - j + dist[cur];",
			"\t\t\t\t}",
			"\t\t\t\tf.clear();",
			"\t\t\t} else {",
			"\t\t\t\t// cout << cur << \" \" << loopCnt << \" 999\" << endl;",
			"\t\t\t\t// 构成新环",
			"\t\t\t\tint ok = 0;",
			"\t\t\t\tint id = 0;",
			"\t\t\t\tfor(int j = 0; j < f.size(); j += 1) {",
			"\t\t\t\t\tif(f[j] == cur) {",
			"\t\t\t\t\t\tok = 1;",
			"\t\t\t\t\t\tid = j;",
			"\t\t\t\t\t\teachLoopSize.pb(f.size() - j);",
			"\t\t\t\t\t}",
			"\t\t\t\t\tpos[f[j]] = loopCnt;",
			"\t\t\t\t\tif(ok) {",
			"\t\t\t\t\t\tjoinPoint[f[j]] = f[j];",
			"\t\t\t\t\t\tdist[f[j]] = 0;",
			"\t\t\t\t\t} else {",
			"\t\t\t\t\t\tjoinPoint[f[j]] = cur;",
			"\t\t\t\t\t\t// dist[f[j]] = ",
			"\t\t\t\t\t}",
			"\t\t\t\t}",
			"\t\t\t\tfor(int j = 0; j < id; j += 1) {",
			"\t\t\t\t\tdist[f[j]] = id - j;",
			"\t\t\t\t}",
			"\t\t\t\tf.clear();",
			"\t\t\t\tloopCnt += 1;",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"\tvoid display() {",
			"\t\tcout << \"loopCnt = \" << loopCnt << endl;",
			"\t\tfor(int i = 0; i < loopCnt; i += 1) {",
			"\t\t\tcout << eachLoopSize[i] << \" \";",
			"\t\t}",
			"\t\tcout << endl;",
			"\t\tcout << \"-------\" << endl;",
			"\t\tfor(int i = 0; i < n; i += 1) {",
			"\t\t\tcout << \"i = \" << i << \" joinPoint = \" << joinPoint[i] << \" pos[i] = \" << pos[i] << \" dist[i] = \" << dist[i] << endl;",
			"\t\t}",
			"\t}",
			"};"
		],
		"description": "快速生成FunctionalGraph类"
	}
}
