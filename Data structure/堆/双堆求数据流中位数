class MidFinder:
    def __init__(self):
        self.diff = 0
        self.la_H = []
        self.lo_H = []
    def makeBalance(self):
        if self.diff == 2:
            heappush(self.lo_H, -self.la_H[0])
            heappop(self.la_H)
            self.diff = 0
        elif self.diff == -1:
            heappush(self.la_H, -self.lo_H[0])
            heappop(self.lo_H)
            self.diff = 1
    def addNum(self, num: int) -> None:
        if not self.la_H or num <= - self.la_H[0]:
            self.diff += 1
            heappush(self.la_H, -num)
        else:
            self.diff -= 1
            heappush(self.lo_H, num)
        self.makeBalance()            
    def findMid(self) -> float:
        if self.diff == 0:
            return (-self.la_H[0] + self.lo_H[0]) / 2
        return -self.la_H[0]
