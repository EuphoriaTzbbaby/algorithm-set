class segtree:
    def __init__(self, a):
        self.nums = a
        self.nums.insert(0, 0)
        self.n = len(a)
        self.tag = [0] * (4 * self.n + 1)
        self.tree = [0] * (4 * self.n + 1)
    def push_up(self, p: int):
        self.tree[p] = self.tree[p + p] + self.tree[p + p + 1]
    def build_tree(self, p: int, pl: int, pr: int):
        if pl == pr:
            self.tree[p] = self.nums[pl]
            return
        mid = (pl + pr) >> 1
        self.build_tree(p + p, pl, mid)
        self.build_tree(p + p + 1, mid + 1, pr)
        self.push_up(p)
    def addtag(self, p: int, pl: int, pr: int, dis: int):
        self.tag[p] += dis
        self.tree[p] += (pr - pl + 1) * dis
    def push_down(self, p: int, pl: int, pr: int):
        if self.tag[p]:
            mid = (pl + pr) >> 1
            self.addtag(p + p, pl , mid, self.tag[p])
            self.addtag(p + p + 1, mid + 1, pr, self.tag[p])
            self.tag[p] = 0
    def update(self, p: int, pl: int, pr: int, l: int, r: int, dis: int):
        if l <= pl and pr <= r:
            self.addtag(p, pl, pr, dis)
            return
        self.push_down(p, pl, pr)
        mid = (pl + pr) >> 1
        if l <= mid:
            self.update(p + p, pl, mid, l, r, dis)
        if mid + 1 <= r:
            self.update(p + p + 1, mid + 1, pr, l, r, dis)
        self.push_up(p)
    def query(self,p: int, pl: int, pr: int, l: int, r: int):
        if l <= pl and pr <= r:
            return self.tree[p]
        self.push_down(p, pl, pr)
        res = 0
        mid = (pl + pr) >> 1
        if l <= mid:
            res += self.query(p + p, pl, mid, l, r)
        if mid + 1 <= r:
            res += self.query(p + p + 1, mid + 1, pr, l, r)
        return res
