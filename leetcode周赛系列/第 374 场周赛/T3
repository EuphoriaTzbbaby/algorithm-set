"""
字符串 26
"""
class Solution:
    def countCompleteSubstrings(self, word: str, k: int) -> int:
        n = len(word)
        def f(s: str):
            print(s)
            res = 0
            for m in range(1, 27):
                if m * k > len(s):
                    break
                kk = m * k
                cnt = [0] * 26
                freq = [0] * (100005)
                for i in range(kk):
                    id = ord(s[i]) - 97
                    cnt[id] += 1             
                    freq[cnt[id] - 1] -= 1
                    freq[cnt[id]] += 1
                if freq[k] == m:
                    res += 1
                for i in range(kk, len(s)):
                    id1 = ord(s[i]) - 97
                    id2 = ord(s[i - kk]) - 97
                    cnt[id1] += 1
                    freq[cnt[id1] - 1] -= 1
                    freq[cnt[id1]] += 1
                    cnt[id2] -= 1
                    freq[cnt[id2] + 1] -= 1
                    freq[cnt[id2]] += 1
                    if freq[k] == m:
                        res += 1
            return res
        i = 0
        ans = 0
        while i < n:
            st = i
            i += 1
            while i  < n and abs(ord(word[i]) - ord(word[i - 1])) <= 2:
                i += 1
            ans += f(word[st:i])
        return ans
            
