"""
二进制枚举 + floyd
"""
class Solution:
    def numberOfSets(self, n: int, maxDistance: int, roads: List[List[int]]) -> int:
        g = [[inf] * n for _ in range(n)]
        for x, y, wt in roads:
            g[x][y] = min(g[x][y], wt)
            g[y][x] = min(g[y][x], wt)
        def dfs(mask: int):
            dis = [[inf] * n for _ in range(n)]
            for i in range(n):
                for j in range(n):
                    if i == j:
                        dis[i][j] = 0 
                    else:
                        if (mask >> i) & 1 and (mask >> j) & 1:
                            dis[i][j] = g[i][j]
                            dis[j][i] = g[i][j]
            f = [[[0] * n for _ in range(n)] for _ in range(n + 1)]
            f[0] = dis 
            for k in range(n):
                for i in range(n):
                    for j in range(n):
                        f[k + 1][i][j] = min(f[k][i][j], f[k][i][k] + f[k][k][j])
            for i in range(n):
                for j in range(n):
                    if (mask >> i) & 1 and (mask >> j) & 1 and f[n][i][j] > maxDistance:
                        return 0
            return 1
        return sum(dfs(mask) for mask in range(1 << n))
                
